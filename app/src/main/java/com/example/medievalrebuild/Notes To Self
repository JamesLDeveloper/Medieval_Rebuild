Update save to include progress of which shops have been visited.

Update ui when choosing equipables to equip.

Update ui when choosing items to use.

Make a map of user progress?

        private void showHandEquipablesDialog(ArrayList<Equipable> equipables, String slotType) {

                AlertDialog.Builder chooseItemFromEquipablesBuilder = new AlertDialog.Builder(ShopActivity.this);

                        View dialogView = getLayoutInflater().inflate(R.layout.dialog_equipable_in_shop, null);
                chooseItemFromEquipablesBuilder.setView(dialogView);

//            RecyclerView recyclerView = dialogView.findViewById(R.id.recyclerViewHandOne);

            RecyclerView recyclerView = dialogView.findViewById(R.id.btn_dialog_equipable_in_shop_buy_item);

//backButton.findViewById(R.id.btn_dialog_equipable_in_shop_back);

            ArrayList<Equipable> generatedEquipablesForSlotType = new ArrayList<>();



            if (slotType.equalsIgnoreCase("Hand")) {


                ArrayList<Equipable> generatedHandOneEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof Shield || equipable instanceof Weapon) {
                        generatedHandOneEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedHandOneEquipables;
            } else if (slotType.equalsIgnoreCase("Helmet")) {


                ArrayList<Equipable> generatedHelmetEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof Helmet) {
                        generatedHelmetEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedHelmetEquipables;
            } else if (slotType.equalsIgnoreCase("ChestArmour")) {


                ArrayList<Equipable> generatedChestArmourEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof ChestArmour) {
                        generatedChestArmourEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedChestArmourEquipables;
            } else if (slotType.equalsIgnoreCase("Trousers")) {


                ArrayList<Equipable> generatedTrouserEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof Trouser) {
                        generatedTrouserEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedTrouserEquipables;
            } else if (slotType.equalsIgnoreCase("Shirt")) {


                ArrayList<Equipable> generatedShirtEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof Shirt) {
                        generatedShirtEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedShirtEquipables;

            } else if (slotType.equalsIgnoreCase("Shoes")) {


                ArrayList<Equipable> generatedShoeEquipables = new ArrayList<>();

//            ArrayList<Equipable> handOneEquipablesList = equipables.stream()
//                    .filter(equipable -> equipable instanceof Shield || equipable instanceof Weapon)
//                    .collect(Collectors.toCollection(ArrayList::new));


                for (Equipable equipable : shopEquipableItemsForPurchase) {

                    if (equipable instanceof Shoe) {
                        generatedShoeEquipables.add(equipable);
                    }

                }

                generatedEquipablesForSlotType = generatedShoeEquipables;

            }


 //                       ArrayList<Equipable> handOneEquipablesList = generatedHandOneEquipables;

                        //HandOneAdapter handOneAdapter = new HandOneAdapter(handOneEquipablesList);
                        //recyclerView.setAdapter(handOneAdapter);

                        ShopAdapter shopAdapter = new ShopAdapter(generatedEquipablesForSlotType, ShopActivity.this);
                        recyclerView.setAdapter(shopAdapter);

                        recyclerView.setLayoutManager(new LinearLayoutManager(ShopActivity.this));

                        AlertDialog alertDialog = chooseItemFromEquipablesBuilder.create();
                        alertDialog.show();

            Button backButton = dialogView.findViewById(R.id.btn_dialog_equipable_in_shop_back);
            backButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    alertDialog.dismiss();
                }
            });

                        shopAdapter.setOnBuyClickListener(new ShopAdapter.OnBuyClickListener() {

                            @Override
                            public void onBuyClick(Equipable equipable) {
                                System.out.println("You have chosen an equipable.");
                                showPurchaseConfirmationDialog(equipable);
                                alertDialog.dismiss();
                            }
                        });

                    }